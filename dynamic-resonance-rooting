# Dynamic Resonance Rooting (DRR) Framework
# Author: Christopher Woodyard (2025)


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from scipy.integrate import odeint
from scipy.spatial import ConvexHull
import networkx as nx
from typing import Tuple, Dict, List, Optional
import warnings


# Note: Ensure 'pyinform' is in your requirements.txt
# pip install pyinform
from pyinform import transfer_entropy as pyinform_te

# Ignore common warnings for cleaner output
warnings.filterwarnings('ignore')


# To organize this project into a package, you could create the following structure:
#
# dynamic-resonance-rooting/
# ├── drr_framework/
# │   ├── __init__.py
# │   ├── analysis.py  (contains DynamicResonanceRooting class)
# │   ├── benchmarks.py (contains BenchmarkSystems class)
# │   └── utils.py (for helper functions)
# ├── notebooks/
# │   └── DRR_Tutorial.ipynb
# ├── .gitignore
# ├── LICENSE
# ├── README.md
# └── requirements.txt
# --------------------------------------------------------------------------

class DynamicResonanceRooting:
    """
    Dynamic Resonance Rooting framework for Complex Adaptive Systems analysis.
    
    This framework integrates three core modules:
    1. Dynamic Resonance Detection: Identifies dominant oscillatory patterns.
    2. Rooting Analysis: Maps causal dependencies using transfer entropy.
    3. Resonance Depth Calculation: Quantifies the stability of resonances.
    """
    
    def __init__(self, embedding_dim: int = 3, tau: int = 1, sampling_rate: float = 1.0):
        """
        Initializes the DRR framework.
        
        Args:
            embedding_dim (int): Dimension for phase space reconstruction.
            tau (int): Time delay for time-delay embedding.
            sampling_rate (float): The sampling rate of the input data in Hz.
        """
        self.embedding_dim = embedding_dim
        self.tau = tau
        self.sampling_rate = sampling_rate
        self.phase_space = None
        self.resonances = {}
        self.influence_network = None
        self.resonance_depths = {}
        
    def time_delay_embedding(self, data: np.ndarray) -> np.ndarray:
        """
        Performs time-delay embedding for phase space reconstruction.
        
        Args:
            data (np.ndarray): 1D time series data.
            
        Returns:
            np.ndarray: The embedded phase space coordinates.
        """
        n = len(data)
        m = self.embedding_dim
        
        embedded = np.zeros((n - (m - 1) * self.tau, m))
        for i in range(m):
            embedded[:, i] = data[i * self.tau : n - (m - 1 - i) * self.tau]
            
        return embedded
    
    def detect_resonances(
        self, 
        data: np.ndarray, 
        method: str = 'fft', 
        peak_height_ratio: float = 0.1
    ) -> Dict:
        """
        Identifies dominant resonances in the time series data.
        
        Args:
            data (np.ndarray): Time series data (1D or multivariate).
            method (str): Method for spectral analysis ('fft' or 'wavelet').
            peak_height_ratio (float): Ratio of the max power for peak detection.
            
        Returns:
            Dict: A dictionary containing resonance information.
        """
        if data.ndim == 1:
            self.phase_space = self.time_delay_embedding(data)
        else:
            self.phase_space = data
            
        resonances = {}
        
        for dim in range(self.phase_space.shape[1]):
            series = self.phase_space[:, dim]
            key = f'dim_{dim}'
            
            if method == 'fft':
                fft_vals = np.fft.fft(series)
                freqs = np.fft.fftfreq(len(series), 1 / self.sampling_rate)
                power_spectrum = np.abs(fft_vals)**2
                
                # Find dominant frequencies using a configurable peak height
                dominant_indices, _ = signal.find_peaks(
                    power_spectrum, height=np.max(power_spectrum) * peak_height_ratio
                )
                
                resonances[key] = {
                    'frequencies': freqs[dominant_indices],
                    'amplitudes': np.abs(fft_vals[dominant_indices]),
                    'power': power_spectrum[dominant_indices]
                }
                
            elif method == 'wavelet':
                from scipy.signal import morlet2
                freqs_wavelet = np.logspace(-2, 1, 50)
                widths = self.sampling_rate / freqs_wavelet
                cwt_matrix = signal.cwt(series, morlet2, widths)
                
                resonances[key] = {
                    'frequencies
